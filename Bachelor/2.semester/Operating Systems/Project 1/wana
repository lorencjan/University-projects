#  File: wana
#  Solution: IOS - project 1
#  Date: 13.3.2019
#  Author: Jan Lorenc
#  Faculty: Faculty of information technology VUT
#  Description: Script analyses log file(s) from a web server and outputs data
#				according to options set by user in script arguments


#!/bin/sh

export LC_ALL=POSIX
POSIXLY_CORRECT=yes

##################################################################
# getting program arguments, getops cannot handle multichar options
# with only one '-' so I need to do it manually
##################################################################

#checks for multiple expression occurrence in script arguments
check_num_of_expr ()
{
	if [ $1 -eq 1 ]; then
		echo "Syntax error in arguments: Script can take only one expression of type list or hist" >&2
		exit 1
	fi
}
#checks for multiple occurrence of a specific option in script arguments
#also options need to be the first arguments, so no expression nor log can be before them
check_num_of_options ()
{
	if [ $1 -eq 1 ]; then
		echo "Syntax error in arguments: Only one option of a sort is allowed!" >&2
		exit 1
	fi
	if [ $expr_count -eq 1 ] || [ -n "$logs" ]; then
		echo "Syntax error in arguments: Options need to go before other argument types!" >&2
		exit 1
	fi
}
#function takes -a or -b value as first param and checks its format
load_date ()
{
	#check for full format YYYY-mm-DD HH:MM:SS
	if [ `echo $1 | grep -E -c "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\s([01][0-9]|2[0-3])(:[0-5][0-9]){2}$"` -ne 0 ];then
		loaded_date=$1
	#check for YYYY-mm-DD HH:MM ... seconds will be added
	elif [ `echo $1 | grep -E -c "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\s([01][0-9]|2[0-3]):[0-5][0-9]$"` -ne 0 ];then
		loaded_date="${1}:00"
	#check for YYYY-mm-DD ... time will be added (00:00:00)
	elif [ `echo $1 | grep -E -c "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"` -ne 0 ];then
		loaded_date="${1} 00:00:00"
	else
		echo "Argument error: Invalid format of datetime!" >&2
		exit 1
	fi;
}
#ends program with error
arg_error ()
{
	echo "Argument error: An option is missing its value!"
	exit 1
}

###### reading and checking arguments ########
#vars for argument count checking, since sh doesn't support arrays
a_count=0; b_count=0; ip_count=0; uri_count=0; expr_count=0; any_log=0
a_before=0; b_before=0; ip_before=0; uri_before=0; expr_before=0
logs=""
for argument in "$@"
do
	case $argument in
		#looking for an option, checking for multiple occurrence, reading its value
		"-a")	check_num_of_options $a_count
				a_count=1; a_before=1
				;;
		"-b")	check_num_of_options $b_count
				b_count=1; b_before=1
				;;
		"-ip")	check_num_of_options $ip_count
				ip_count=1; ip_before=1
				;;
		"-uri")	check_num_of_options $uri_count
				uri_count=1; uri_before=1
				;;
		"list-ip"|"list-hosts"|"list-uri"|"hist-ip"|"hist-load")
				if [ $a_before -eq 1 ] || [ $b_before -eq 1 ] || [ $ip_before -eq 1 ] || [ $uri_before -eq 1 ];then arg_error; fi
				if [ $expr_count -eq 1 ];then
					echo "Argument error: Only one expression is allowed!"
					exit 1
				fi
				expr_count=1; expr=$argument
				;;
		*)	#check for value of -a or -b arguments
			loaded_date=0
			if [ $a_before -eq 1 ];then
				if [ $b_before -eq 1 ] || [ $ip_before -eq 1 ] || [ $uri_before -eq 1 ];then arg_error; fi
				a_before=0
				load_date "$argument"
				a=$loaded_date
			elif [ $b_before -eq 1 ];then
				if [ $a_before -eq 1 ] || [ $ip_before -eq 1 ] || [ $uri_before -eq 1 ];then arg_error; fi
				b_before=0
				load_date "$argument"
				b=$loaded_date
			#check for value of -ip argument
			elif [ $ip_before -eq 1 ];then
				if [ $a_before -eq 1 ] || [ $b_before -eq 1 ] || [ $uri_before -eq 1 ];then arg_error; fi
				ip_before=0
				ip=$argument
				#checks IPv4 and both variants of IPv6
				if [ `echo $ip | grep -E -c "^([0-9]{1,3}\.){3}[0-9]{1,3}$"` -eq 0 ] && 
				   [ `echo $ip | grep -E -c "^([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}$"` -eq 0 ] &&
				   [ `echo $ip | grep -E -c "^([a-fA-F0-9]{1,4}:){4}(:[a-fA-F0-9]{1,4}){2}$"` -eq 0 ]; then
					echo "Argument error: Invalid format of IP adress!" >&2
					exit 1
				fi
			#uri is supposed to be a basic regex, so no need for checking, it can be anything
			elif [ $uri_before -eq 1 ];then
				if [ $a_before -eq 1 ] || [ $b_before -eq 1 ] || [ $ip_before -eq 1 ];then arg_error; fi
				uri_before=0
				uri=$argument
			#rest are supposed to be the logs, so we check, if the argument is a readable file
			else 
				if ! [ -r $argument ]; then
				  echo "Argument error: Unrecognized $argument!" >&2
			   	  echo "Please, enter [-option], [expression], readable log file or zipped .gz package!" >&2
				  exit 1
			    else
			   	  logs="${logs} $argument"
			   	  any_log=1
			   	fi
		    fi;;
	esac
done
#check whether all options have their values
if [ $a_before -eq 1 ] || [ $b_before -eq 1 ] || [ $ip_before -eq 1 ] || [ $uri_before -eq 1 ];then arg_error;fi

#if no logs were given, read from stdin
if [ $any_log -eq 0 ];then logs=/dev/stdin;fi

##################################################################
#running actions according to options
##################################################################

#converts datetime from log format dd/mon/YYYY or standard YYYY-MM-DD to seconds
datetime_to_secs ()
{
	if [ `echo $1 | grep -E -c "^[0-9]{2}/[A-Z][a-z]{2}/[0-9]{4}:[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$"` -eq 1 ];then
		case `echo $1 | grep -E -o "[A-Z][a-z]{2}"` in
			'Jan') month="01";;
			'Feb') month="02";;
			'Mar') month="03";;
			'Apr') month="04";;
			'May') month="05";;
			'Jun') month="06";;
			'Jul') month="07";;
			'Aug') month="08";;
			'Sep') month="09";;
			'Oct') month="10";;
			'Nov') month="11";;
			'Dec') month="12";;
		esac
		day=`echo $1 | grep -E -o "^[0-9]{2}"`
		year=`echo $1 | grep -E -o "[0-9]{4}"`
		time=`echo $1 | grep -E -o "[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$"`
		log_datetime="$year-$month-$day $time"
		echo `date --date="$log_datetime" +%s`
	elif [ `echo $1 | grep -E -c "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\s([01][0-9]|2[0-3])(:[0-5][0-9]){2}$"` -eq 1 ];then
		echo `date --date="$1" +%s`
	else
		echo 1
	fi
}

########## loading log contents under -ip and -uri regex conditions to logs_content string "array" ##########
logs_content=""
#creating regex according to arg values
if [ $ip_count -eq 1 ] && [ $uri_count -eq 1 ];then
	regex="$ip\s-\s-.*?$uri]"
elif [ $ip_count -eq 1 ];then
	regex="$ip\s-\s-"
elif [ $uri_count -eq 1 ];then
	regex="$uri"
else
	regex="^.*$"
fi
#loading file contents
IFS=' '
for log in ${logs}
do  #for some reason '\n' does not work very well as delimeter (randomly split), so I use ^ instead
	if [ `echo ${log} | grep -E -c ".*\.gz$"` -eq 1 ]; then
		logs_content="${logs_content}`gunzip -c $log | grep -E $regex | tr '\n' '^'`"
	else
		logs_content="${logs_content}`grep -E $regex $log | tr '\n' '^'`"
	fi
done

#string "array" for ultimate results
results=''
########## cheicking datetime ... args -a, -b ##########
#check if -a or -b is even set
if [ $a_count -eq 1 ] || [ $b_count -eq 1 ];then
	#no need to specifically check -a and -b now, if option is not set, result is 1 and moreover it is checked later
	above_date=`datetime_to_secs "$a"`
	below_date=`datetime_to_secs "$b"`
	IFS='^'
	for content in ${logs_content}
	do 
		log_date=`echo $content | grep -E -o "[0-9]{2}/[A-Z][a-z]{2}/[0-9]{4}:[0-2][0-9]:[0-6][0-9]:[0-6][0-9]"`
		if [ -n $log_date ];then
			#if datetime is not above -a or not below -b, it will not be added to the results
			log_date=`datetime_to_secs "$log_date"`
			if [ $a_count -eq 1 ] && [ $log_date -le $above_date ];then content=''
			elif [ $b_count -eq 1 ] && [ $log_date -ge $below_date ];then content=''
			else
				results="${results}$content^"
			fi
		fi
	done
else
	results=$logs_content
fi

##################################################################
#running actions according to expression
##################################################################
IFS='^'; count=1  # for some reason, end of line as delimiter is read quit randomly, so I use "^" instead
#if no expression was given, display results and end script
if [ $expr_count -eq 0 ];then
	for result in ${results}
	do echo $result;done
	exit 0
fi
#otherwise do an action
to_print_str="";
case $expr in
	#if a valid ip adress was found, print it -> prints only ip adresses
	"list-ip")	for line in ${results}
				do
					to_print=`echo $line | grep -E -o -e "^([0-9]{1,3}\.){3}[0-9]{1,3}"\
						 	  -e "^([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}" -e "^([a-fA-F0-9]{1,4}:){4}(:[a-fA-F0-9]{1,4}){2}"`
					if [ -n $to_print ] && [ `echo $to_print_str | grep -E -c "$to_print"` -eq 0 ]
					then to_print_str="${to_print_str}$to_print^";fi
				done
				for line in $to_print_str
				do echo $line;done
				;;
	#if a valid ip adress was found, print its host or itself if not found -> prints hosts to ip adresses
	"list-hosts")for line in ${results}
				 do
					ip_adress=`echo $line | grep -E -o -e "^([0-9]{1,3}\.){3}[0-9]{1,3}" -e "^([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}"\
						 		-e "^([a-fA-F0-9]{1,4}:){4}(:[a-fA-F0-9]{1,4}){2}"`
					if [ -n $ip_adress ];then
						host=`host $ip_adress`
						if [ `echo $host | grep -E -c "Host.*not\sfound"` -eq 1 ] && [ `echo $to_print_str | grep -E -c "$ip_adress"` -eq 0 ];then
							to_print_str="${to_print_str}$ip_adress^"
						elif [ `echo $host | grep -E -c "domain\sname\spointer\s.*\."` -eq 1 ];then
							host=`echo $host | grep -E -o "domain\sname\spointer\s.*\." | cut -d ' ' -f 4`
							if [ `echo $to_print_str | grep -E -c "$host"` -eq 0 ]
							then to_print_str="${to_print_str}$host^";fi #cut the last dot (end of sentence dot)
						fi
					fi
				 done
				 for line in $to_print_str
				 do echo $line;done
				 ;;
	#prints the URIs from the log
	"list-uri")	for line in ${results}
				do
					found_uri=`echo $line | grep -E -o "(GET|POST|HEAD)\s.*\sHTTP"`
					if [ -n $found_uri ];then
						found_uri=`echo $found_uri | grep -E -o "\s.*\s"`
						if [ `echo $to_print_str | grep -E -c "$found_uri"` -eq 0 ]
						then to_print_str="${to_print_str}$found_uri^";fi
					fi
				done
				for line in $to_print_str
				do echo ${line:1:-1};done
				;;
	#shows ip histogram ... loads ip adresses, then counts each adresses' 										
	"hist-ip")	ip_adresses=""
				for line in ${results}
				do  #finds an ip adress AND checks if it hasn't already been found
					ip_adress=`echo $line | grep -E -o -e "^([0-9]{1,3}\.){3}[0-9]{1,3}" -e "^([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}"\
						 		-e "^([a-fA-F0-9]{1,4}:){4}(:[a-fA-F0-9]{1,4}){2}"`
					if [ -n $ip_adress ];then
						if [ `echo $ip_adresses | grep -E -c "$ip_adress"` -eq 0 ];then
							ip_adresses="${ip_adresses}$ip_adress "
							#prints the histogram
							num_of_occurrences=`echo $results | grep -E -o "$ip_adress" | wc -l`
							printf '%s (%d): ' $ip_adress $num_of_occurrences
						    i=0
						    while [ $i -lt $num_of_occurrences ]
						    do printf '#'; i=`expr $i + 1`;done
						    echo
						fi
					fi
				done | sort -rnt'(' -k2
				;;
	#shows load histogram ... finds lowest and highest datetime,
	#makes a string "array" element for each hour, counts occurrences
	"hist-load") times=""
				 max=`echo $results | grep -E -o "[0-9]{2}/[A-Z][a-z]{2}/[0-9]{4}:[0-2][0-9]:[0-6][0-9]:[0-6][0-9]" | head -1`
				 max=`datetime_to_secs $max`
				 min=$max
				 #loading times and searching for maximum and minimum
				 for result in ${results}
				 do 
				 	datetime=`echo $result | grep -E -o "[0-9]{2}/[A-Z][a-z]{2}/[0-9]{4}:[0-2][0-9]:[0-6][0-9]:[0-6][0-9]"`
				 	if [ -n $datetime ];then
				 		datetime=`datetime_to_secs "$datetime"`
				 		times="${times}$datetime^"
				 		if [ $datetime -gt $max ]; then max=$datetime; fi
						if [ $datetime -lt $min ]; then min=$datetime; fi
				 	fi
				 done
				 max=`expr $max - $max % 3600`
				 min=`expr $min - $min % 3600`
				 #counting and printing results
				 date=$min
				 while [ $date -le $max ]
				 do
				 	count=0
				 	for time in ${times}
				 	do
				 		if [ $date -le $time ] && [ `expr $date + 3600` -gt $time ]
				 		then count=`expr $count + 1` ; fi
				 	done
				 	#printing result if there were some occurrences ... for some reason "date" function is 1 hour off ... 
				 	#while comparing it's no problem, but now at the representation we need to add it
				 	if [ $count -gt 0 ];then
					 	date_for_print=`expr $date + 3600`
					 	printf '%s (%d): ' `date -u -d @${date_for_print} +"%Y-%m-%d %H:%M"` $count
					    i=0
						while [ $i -lt $count ]
						do printf '#'; i=`expr $i + 1`;done
						echo
				    fi
				 	date=`expr $date + 3600`
				 done
				 ;;			
esac
exit 0
