plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    // Apply the Maven publish plugin to publish resulting artefacts into a Maven repository
    id 'maven-publish'
}

version = externalVersion

// Define the main class for the application
mainClassName = externalMainClassName

run {
    // Pass all system properties to the application and the start scripts (overwrite previously defined defaults if any)
    systemProperties System.getProperties()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'build-repository'
            url = "file://${buildDir}/mvn-repo"
        }
    }
}

dependencies {
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-core:3.2.2'
    implementation 'org.apache.hadoop:hadoop-common:3.2.2'
    implementation 'org.apache.hadoop:hadoop-minicluster:3.2.2'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.2'
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

compileJava {
    // for compatibility with Hadoop distributions such as Cloudera QuickStarts for CDH 5.13 (Java 1.7.0_67)
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

jar {
  manifest {
    attributes(
      'Main-Class': externalMainClassNameInFatJar
    )
  }
}

task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'
  duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  zip64 true
  with jar
}

artifacts {
    archives fatJar
}
