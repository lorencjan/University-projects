// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackBoss.Web.Data;

namespace StackBoss.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220503101022_addData")]
    partial class addData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b6fb5986-c33a-438a-bb5d-caed50925624",
                            ConcurrencyStamp = "d65c6a25-b7d8-4c04-8133-4cfb222f5f12",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e2ed6b05-6503-4f88-90d3-84e28c7b6a65",
                            ConcurrencyStamp = "993d4ebb-c483-4182-add6-04da1aaea5fb",
                            Name = "ProjectManager",
                            NormalizedName = "PROJECTMANAGER"
                        },
                        new
                        {
                            Id = "9e4a5add-9f62-4512-9e1e-725a6e93523d",
                            ConcurrencyStamp = "37c9288c-f60e-4afa-aa21-bffd7319f8e0",
                            Name = "ProjectDirector",
                            NormalizedName = "PROJECTDIRECTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StackBoss.Web.Data.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomId = "P_001",
                            Description = "Information system for Hospital in Brno",
                            Manager = "Ing. Jan Honza",
                            Name = "Medical IS",
                            Staff = "Lukas Kudlicka, Michal Kovac"
                        },
                        new
                        {
                            Id = 2,
                            CustomId = "P_002",
                            Description = "Information system for Andrews Constructions",
                            Manager = "Ing. ´Michal Slivka",
                            Name = "Engineering IS",
                            Staff = "Peter Janosik, Michal Kutil"
                        },
                        new
                        {
                            Id = 3,
                            CustomId = "P_003",
                            Description = "Information system for Hotel Yasmin",
                            Manager = "Ing. ´Michal Chrapko",
                            Name = "Hotel IS",
                            Staff = "Jakub Varga, Jakub Kulan"
                        });
                });

            modelBuilder.Entity("StackBoss.Web.Data.Entities.RiskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Consequences")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedStateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Probability")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RiskEvaluation")
                        .HasColumnType("int");

                    b.Property<string>("Starters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Threat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RiskTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 2,
                            Consequences = 8,
                            CreatedDate = new DateTime(2021, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P001_R01",
                            Description = "Test bussiness risk",
                            ModifiedStateDate = new DateTime(2021, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Losing customers",
                            Owner = "Ing. Jozko Mrkvicka",
                            Probability = 3,
                            ProjectId = 1,
                            Reaction = "Have 2 or more suppliers",
                            ReactionDate = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 24,
                            Starters = "Lack of medication",
                            State = 1,
                            Threat = "The supplier will not supply the medication"
                        },
                        new
                        {
                            Id = 2,
                            Category = 3,
                            Consequences = 7,
                            CreatedDate = new DateTime(2022, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P001_R02",
                            Description = "Test extern risk",
                            ModifiedStateDate = new DateTime(2022, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of National Crisis",
                            Owner = "Ing. Jozko Mrkvicka",
                            Probability = 3,
                            ProjectId = 1,
                            Reaction = "Create a reserve fund",
                            ReactionDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 48,
                            Starters = "People stopped buying medication enough",
                            State = 1,
                            Threat = "Loosing all of money"
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            Consequences = 9,
                            CreatedDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P001_R03",
                            Description = "Test technical risk",
                            ModifiedStateDate = new DateTime(2021, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Lost Data",
                            Owner = "Ing. Jozko Mrkvicka",
                            Probability = 4,
                            ProjectId = 1,
                            Reaction = "Buy and install antivirus",
                            ReactionDate = new DateTime(2021, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 36,
                            Starters = "The system was not checked against hacking",
                            State = 1,
                            Threat = "Loosing all of data"
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            Consequences = 8,
                            CreatedDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P001_R04",
                            Description = "Test project risk",
                            ModifiedStateDate = new DateTime(2021, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Planning",
                            Owner = "Ing. Jozko Mrkvicka",
                            Probability = 1,
                            ProjectId = 1,
                            Reaction = "Increase employee control",
                            ReactionDate = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 8,
                            Starters = "Insufficient control of employees",
                            State = 2,
                            Threat = "Loss of control of the project"
                        },
                        new
                        {
                            Id = 5,
                            Category = 1,
                            Consequences = 7,
                            CreatedDate = new DateTime(2021, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P001_R06",
                            Description = "Test project risk",
                            ModifiedStateDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of System Failure",
                            Owner = "Ing. Jozko Mrkvicka",
                            Probability = 4,
                            ProjectId = 1,
                            Reaction = "Test the system as a whole but also in parts",
                            ReactionDate = new DateTime(2021, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 28,
                            Starters = "Not every part of the system has been tested",
                            State = 2,
                            Threat = "The whole system will fall"
                        },
                        new
                        {
                            Id = 6,
                            Category = 0,
                            Consequences = 8,
                            CreatedDate = new DateTime(2021, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R06",
                            Description = "Test technical risk",
                            ModifiedStateDate = new DateTime(2021, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Lost Data",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 4,
                            ProjectId = 2,
                            Reaction = "Buy and install antivirus",
                            ReactionDate = new DateTime(2021, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 32,
                            Starters = "The system was not checked against hacking",
                            State = 1,
                            Threat = "Loosing all of data"
                        },
                        new
                        {
                            Id = 7,
                            Category = 2,
                            Consequences = 6,
                            CreatedDate = new DateTime(2021, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R07",
                            Description = "Test business risk",
                            ModifiedStateDate = new DateTime(2021, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Losing market position",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 4,
                            ProjectId = 2,
                            Reaction = "translate the manual into several languages",
                            ReactionDate = new DateTime(2021, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 24,
                            Starters = "Product manual only in national language",
                            State = 1,
                            Threat = "The foreign market will know nothing about us"
                        },
                        new
                        {
                            Id = 8,
                            Category = 3,
                            Consequences = 9,
                            CreatedDate = new DateTime(2021, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R08",
                            Description = "Test extern risk",
                            ModifiedStateDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of National Crisis",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 5,
                            ProjectId = 2,
                            Reaction = "Create a reserve fund",
                            ReactionDate = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 45,
                            Starters = "People stopped buying medication enough",
                            State = 1,
                            Threat = "Loosing all of money"
                        },
                        new
                        {
                            Id = 9,
                            Category = 0,
                            Consequences = 10,
                            CreatedDate = new DateTime(2021, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R09",
                            Description = "Test technical risk",
                            ModifiedStateDate = new DateTime(2021, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Fire",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 6,
                            ProjectId = 2,
                            Reaction = "Buy and inspect fire detectors regularly",
                            ReactionDate = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 60,
                            Starters = "The factory does not have fire detectors",
                            State = 1,
                            Threat = "loss of production site"
                        },
                        new
                        {
                            Id = 10,
                            Category = 1,
                            Consequences = 6,
                            CreatedDate = new DateTime(2021, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R10",
                            Description = "Test project risk",
                            ModifiedStateDate = new DateTime(2021, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Planning",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 2,
                            ProjectId = 2,
                            Reaction = "Increase employee control",
                            ReactionDate = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 12,
                            Starters = "Insufficient control of employees",
                            State = 4,
                            Threat = "Loss of control of the project"
                        },
                        new
                        {
                            Id = 11,
                            Category = 1,
                            Consequences = 7,
                            CreatedDate = new DateTime(2021, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P002_R11",
                            Description = "Test project risk",
                            ModifiedStateDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of System Failure",
                            Owner = "Ing. Jan Hrasko",
                            Probability = 4,
                            ProjectId = 2,
                            Reaction = "Test the system as a whole but also in parts",
                            ReactionDate = new DateTime(2021, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 28,
                            Starters = "Not every part of the system has been tested",
                            State = 2,
                            Threat = "The whole system will fall"
                        },
                        new
                        {
                            Id = 12,
                            Category = 0,
                            Consequences = 5,
                            CreatedDate = new DateTime(2021, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P003_R12",
                            Description = "Test technical risk",
                            ModifiedStateDate = new DateTime(2021, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of losing information about the accommodated",
                            Owner = "Ing. Jakub Malik",
                            Probability = 5,
                            ProjectId = 3,
                            Reaction = "Buy and install antivirus",
                            ReactionDate = new DateTime(2021, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 25,
                            Starters = "The system was not checked against hacking",
                            State = 1,
                            Threat = "Loosing all of data"
                        },
                        new
                        {
                            Id = 13,
                            Category = 2,
                            Consequences = 6,
                            CreatedDate = new DateTime(2021, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P003_R13",
                            Description = "Test business risk",
                            ModifiedStateDate = new DateTime(2021, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "risk of Losing the position on the international market",
                            Owner = "Ing. Jakub Malik",
                            Probability = 3,
                            ProjectId = 3,
                            Reaction = "Create a page for online booking",
                            ReactionDate = new DateTime(2021, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 18,
                            Starters = "The hotel was not sufficiently presented online",
                            State = 1,
                            Threat = "The foreign market will know nothing about us"
                        },
                        new
                        {
                            Id = 14,
                            Category = 0,
                            Consequences = 10,
                            CreatedDate = new DateTime(2021, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P003_R14",
                            Description = "Test technical risk",
                            ModifiedStateDate = new DateTime(2021, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of Fire",
                            Owner = "Ing. Jakub Malik",
                            Probability = 6,
                            ProjectId = 3,
                            Reaction = "Buy and inspect fire detectors regularly",
                            ReactionDate = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 60,
                            Starters = "The hotel does not have fire detectors",
                            State = 1,
                            Threat = "Loss of space for customer accommodation"
                        },
                        new
                        {
                            Id = 15,
                            Category = 1,
                            Consequences = 7,
                            CreatedDate = new DateTime(2021, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P003_R15",
                            Description = "Test project risk",
                            ModifiedStateDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of System Failure",
                            Owner = "Ing. Jakub Malik",
                            Probability = 2,
                            ProjectId = 3,
                            Reaction = "Test the system as a whole but also in parts",
                            ReactionDate = new DateTime(2021, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 28,
                            Starters = "Not every part of the system has been tested",
                            State = 3,
                            Threat = "Impossibility to accommodate anyone"
                        },
                        new
                        {
                            Id = 16,
                            Category = 3,
                            Consequences = 8,
                            CreatedDate = new DateTime(2021, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomId = "P003_R16",
                            Description = "Test extern risk",
                            ModifiedStateDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Risk of National Crisis",
                            Owner = "Ing. Jakub Malik",
                            Probability = 4,
                            ProjectId = 3,
                            Reaction = "Create a reserve fund",
                            ReactionDate = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RiskEvaluation = 32,
                            Starters = "People stopped going on trips with accommodation",
                            State = 1,
                            Threat = "Lost most of money"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackBoss.Web.Data.Entities.RiskEntity", b =>
                {
                    b.HasOne("StackBoss.Web.Data.Entities.ProjectEntity", "Project")
                        .WithMany("RiskList")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StackBoss.Web.Data.Entities.ProjectEntity", b =>
                {
                    b.Navigation("RiskList");
                });
#pragma warning restore 612, 618
        }
    }
}
