/**
 * @file    base_mesh_builder.h
 *
 * @authors Filip Vaverka <ivaverka@fit.vutbr.cz>
 *          Vojtech Mrazek <mrazek@fit.vutbr.cz>
 *
 * @brief   Common base class for implementation of marching cubes algorithm to
 *          extract polygonal surface from parametric scalar field (iso surface).
 *          See: https://en.wikipedia.org/wiki/Marching_cubes
 *               https://en.wikipedia.org/wiki/Isosurface
 *               http://paulbourke.net/geometry/polygonise/
 *
 * @date    06 November 2020, 11:07
 **/

#ifndef BASE_MESH_BUILDER_H
#define BASE_MESH_BUILDER_H

#include <array>

#include "vector_helpers.h"
#include "parametric_scalar_field.h"

/**
 * @brief The BaseMeshBuilder class
 */
class BaseMeshBuilder
{
public:
    /**
     * @brief Constructor for BaseMeshBuilder object.
     * @param [in] gridEdgeSize Number of grid points in each direction.
     */
    BaseMeshBuilder(unsigned gridEdgeSize, const std::string &name);

    virtual ~BaseMeshBuilder();

    /**
     * @brief Builds mesh from specified scalar field (input field) and
     *        stores resulting mesh into the file in *.obj format (meshFilename).
     * @param [in] inputField   Input scalar field object.
     * @param [in] meshFilename Output mesh filename.
     */
    void buildMesh(const ParametricScalarField &inputField, const std::string &meshFilename);

    bool isInBatchMode() const { return mIsInBatchMode; }
    void setBatchMode(bool batchMode) { mIsInBatchMode = batchMode; }

protected:
    typedef std::array<Vec3_t<float>, 8> CubeCornerVerts_t;
    typedef std::array<Vec3_t<float>, 3> Triangle_t;

    /**
     * @brief Is called by "BuildMesh" and is supposed to perform marching cubes
     *        algorithm over current input field.
     * @param [in] field Input scalar field object.
     * @return Returns total number of triangles generated.
     */
    virtual unsigned marchCubes(const ParametricScalarField &field) = 0;

    /**
     * @brief Used to get value of the scalar field at specific point (pos) in 3D space.
     * @param [in] pos   Position to evaluate the field at.
     * @param [in] field Input scalar field object.
     * @return Returns scalar value of the field at point "pos".
     */
    virtual float evaluateFieldAt(const Vec3_t<float> &pos, const ParametricScalarField &field) = 0;

    /**
     * @brief Called by "buildCube(...)" when single triangle is generated and has to
     *        be stored in the output array.
     * @param [in] triangle Triangle (consisting of array of 3 points in 3D space) to
     *                      be stored in the output array.
     */
    virtual void emitTriangle(const Triangle_t &triangle) = 0;

    /**
     * @brief getTrianglesArray
     * @return Returns pointer to dense array which stores triangles of the mesh.
     *         The triangles are generated by calls to "emitTriangle" method.
     */
    virtual const Triangle_t *getTrianglesArray() const = 0;

    /**
     * @brief Used by "BuildCube" to transform cube corner vertices from normalized space
     *        to the field space.
     * @param [in]  pos               Cube position in the grid (in "number of cubes").
     * @param [in]  normVerts         Edges of the cube with edge length 1.0 at (0, 0, 0)
     * @param [out] outMeshSpaceVerts Cube corners translated to position given by "pos"
     *                                and scaled to "mGridResolution".
     */
    void transformCubeVertices(const Vec3_t<float> &pos, const CubeCornerVerts_t &normVerts,
                               CubeCornerVerts_t &outMeshSpaceVerts);

    /**
     * @brief Linear interpolation of the vertex at an edge of the cube. This is
     *        used by "buildCube(...)" to place edge vertex at exact point where field
     *        has value of specified "iso level".
     * @param [in] v0  First endpoint of the edge.
     * @param [in] l0  Field value at the first endpoint (v0).
     * @param [in] v1  Oposite endpoint of the edge.
     * @param [in] l1  Field value at the oposite endpoint of the edge (v1).
     * @param [in] out Linearly interpolated vertex at the edge between "v0" and "v1".
     */
    void interpolateVertex(const Vec3_t<float> &v0, float l0,
                           const Vec3_t<float> &v1, float l1, Vec3_t<float> &out);

    /**
     * @brief Evaluate marching cube at specified position on the grid (in "number of cubes from the edge")
     *        and generate 0 - 5 triangles representing iso surface in the cube.
     *        This method uses:
     *        - "evaluateFieldAt" to evaluate field at the cube corners.
     *        - "emitTriangle" to store generated triangle.
     *
     * @param [in] position Position of the cube in the grid (in "number of cubes").
     * @return Returns number of triangles generated from the cube (0-5).
     */
    unsigned buildCube(const Vec3_t<float> &position, const ParametricScalarField &field);

    /**
     * @brief Stores generated triangles in the Wavefront (*.obj) format to
     *        the file.
     *        This method uses "getTrianglesArray" to obtain pointer to dense
     *        array of generated triangles.
     * @param [in] meshFilename Filename where mesh should be stored.
     * @param [in] count        Number of triangles in array obtained by "GetTrianglesArray".
     * @return Returns number of bytes written to the output file.
     */
    unsigned storeMeshFile(const std::string &meshFilename, unsigned count);

    unsigned mGridSize;             ///< Number of "cubes" in each of 3 dimensions.
    float mGridResolution;          ///< Size of each "cube" (resolution).
    float mIsoLevel;                ///< Value of the field at which surface is expected.
    std::string mBuilderName;       ///< Name of the builder used in outputs.
    bool mIsInBatchMode;            ///< Output only minimal information in machine readable format.

    static const unsigned sc_vertexAdjIds[12];       ///< Indexes of oposite corners of each edge (assuming first points are numbered linearly from 0).
    static const CubeCornerVerts_t sc_vertexNormPos; ///< Corners of normalized cube at (0, 0, 0) with edge length of 1.0.
    static const int sc_triIndexTable[256][16];      ///< Marching cubes edge vertex indexes used to generate triangles.
};

#endif // BASE_MESH_BUILDER_H
